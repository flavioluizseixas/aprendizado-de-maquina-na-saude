surv_cxmod <- cbind(surv_cxmod0, m_newdat)
head(surv_cxmod)
# Plot
print(ggsurvplot_df(surv_cxmod, linetype = "horTh", color = "tsize",
legend.title = NULL, censor = FALSE))
# Instale os pacotes, caso ainda não os tenha
if (!require("TH.data")) install.packages("TH.data")
if (!require("survival")) install.packages("survival")
if (!require("survminer")) install.packages("survminer")
# Carregar os pacotes
library(TH.data)
library(survival)
library(survminer)
library(ggplot2)
# Carregar o conjunto de dados
data("GBSG2", package = "TH.data")
head(GBSG2)
# Criando o objeto de sobrevivência
surv_obj <- Surv(time = GBSG2$time, event = GBSG2$cens)
# Ajuste do modelo Kaplan-Meier
km_fit <- survfit(surv_obj ~ 1)
# Visualização do Kaplan-Meier
ggsurvplot(km_fit, data = GBSG2, conf.int = TRUE,
title = "Curva de Sobrevivência Kaplan-Meier",
xlab = "Tempo (dias)", ylab = "Probabilidade de Sobrevivência")
# Weibull model
wbmod <- survreg(Surv(time,cens) ~ horTh + tsize, data = GBSG2)
# Imaginary patients
newdat <- expand.grid(
horTh = levels(GBSG2$horTh),
tsize = quantile(GBSG2$tsize, probs = c(0.25, 0.5, 0.75)))
newdat
# Compute survival curves
surv <- seq(.99, .01, by = -.01)
t <- predict(wbmod,
type = "quantile",
p = 1-surv,
newdata = newdat)
# How many rows and columns does t have?
dim(t)
# Use cbind() to combine the information in newdat with t
surv_wbmod_wide <- cbind(newdat, t)
# Use melt() to bring the data.frame to long format
surv_wbmod <- melt(surv_wbmod_wide,
id.vars = c("horTh", "tsize"),
variable.name = "surv_id",
value.name = "time")
# Use surv_wbmod$surv_id to add the correct survival probabilities surv
surv_wbmod$surv <- surv[as.numeric(surv_wbmod$surv_id)]
# Add columns upper, lower, std.err, and strata to the data.frame
surv_wbmod[, c("upper", "lower", "std.err", "strata")] <- NA
# Take a look at the structure of the object
str(surv_wbmod)
# Plot the survival curves
print(ggsurvplot_df(surv_wbmod,
surv.geom = geom_line,
linetype = "horTh",
color = "tsize",
title = "Curva de Sobrevivência Weibull",
legend.title = NULL))
# Cox model
cxmod <- coxph(Surv(time, cens) ~ horTh + tsize, data = GBSG2)
# Imaginary patients
newdat <- expand.grid(
horTh = levels(GBSG2$horTh),
tsize = quantile(GBSG2$tsize, probs = c(0.25, 0.5, 0.75))
)
# Compute survival curves
cxsf <- survfit(cxmod, data = GBSG2, newdata = newdat, conf.type = "none")
# Look at first 6 rows of cxsf$surv and time points
head(cxsf$surv)
# Compute data.frame needed for plotting
surv_cxmod0 <- surv_summary(cxsf)
# Get a character vector of patient letters (patient IDs)
pid <- as.character(surv_cxmod0$strata)
# Multiple of the rows in newdat so that it fits with surv_cxmod0
m_newdat <- newdat[pid, ]
# Add patient info to data.frame
surv_cxmod <- cbind(surv_cxmod0, m_newdat)
head(surv_cxmod)
# Plot
print(ggsurvplot_df(surv_cxmod, linetype = "horTh", color = "tsize",
legend.title = NULL, censor = FALSE))
# Plotando os três modelos no mesmo gráfico
ggsurvplot_list(list(Kaplan_Meier = km_fit, Weibull = weibull_surv, Cox = cox_surv),
data = GBSG2,
title = "Comparação das Curvas de Sobrevivência",
xlab = "Tempo (dias)", ylab = "Probabilidade de Sobrevivência")
# Ajuste do modelo Weibull sem decomposição
wbmod <- survreg(Surv(time, cens) ~ 1, data = GBSG2, dist = "weibull")
# Definir uma sequência de probabilidades de sobrevivência
surv <- seq(0.99, 0.01, by = -0.01)
# Calcular os tempos preditos para cada nível de probabilidade de sobrevivência
time_pred <- predict(wbmod, type = "quantile", p = 1 - surv)
# Criar um data frame para visualização
surv_wbmod <- data.frame(time = time_pred, survival = surv)
# Ajuste do modelo Weibull sem decomposição
wbmod <- survreg(Surv(time, cens) ~ 1, data = GBSG2, dist = "weibull")
# Definir uma sequência de probabilidades de sobrevivência
surv <- seq(0.99, 0.01, by = -0.01)
# Calcular os tempos preditos para cada nível de probabilidade de sobrevivência
# Como estamos prevendo apenas uma curva média, precisamos de um único conjunto de predições
time_pred <- predict(wbmod, type = "quantile", p = 1 - surv, newdata = data.frame(1))
# Criar um data frame para visualização
surv_wbmod <- data.frame(time = time_pred, survival = surv)
# Plotar a curva de sobrevivência Weibull simplificada
ggplot(surv_wbmod, aes(x = time, y = survival)) +
geom_line(color = "blue") +
labs(title = "Curva de Sobrevivência Weibull (Sem Decomposição)",
x = "Tempo (dias)", y = "Probabilidade de Sobrevivência") +
theme_minimal()
# Ajuste do modelo de Cox sem especificar covariáveis (curva média de sobrevivência)
cox_fit <- coxph(Surv(time, cens) ~ 1, data = GBSG2)
# Gerar a curva de sobrevivência média
cox_surv <- survfit(cox_fit)
# Visualizar a curva de sobrevivência usando ggsurvplot
ggsurvplot(cox_surv, data = GBSG2,
title = "Curva de Sobrevivência do Modelo de Cox (Sem Decomposição)",
xlab = "Tempo (dias)", ylab = "Probabilidade de Sobrevivência",
conf.int = TRUE)
# Ajuste do modelo de Cox sem especificar covariáveis (curva média de sobrevivência)
cox_fit <- coxph(Surv(time, cens) ~ 1, data = GBSG2)
# Gerar a curva de sobrevivência média
cox_surv <- survfit(cox_fit)
# Visualizar a curva de sobrevivência usando ggsurvplot
ggsurvplot(cox_surv, data = GBSG2,
title = "Curva de Sobrevivência do Modelo de Cox",
xlab = "Tempo (dias)", ylab = "Probabilidade de Sobrevivência",
conf.int = TRUE)
# Criar variáveis de grupo para tsize
GBSG2 <- GBSG2 %>%
mutate(tsize_group = cut(tsize,
breaks = quantile(tsize, probs = c(0, 0.25, 0.5, 0.75, 1)),
include.lowest = TRUE,
labels = c("Q1", "Q2", "Q3", "Q4")))
# Ajustar o modelo Kaplan-Meier para cada combinação de horTh e tsize_group
km_fit <- survfit(Surv(time, cens) ~ horTh + tsize_group, data = GBSG2)
# Visualizar as curvas de sobrevivência Kaplan-Meier com ggsurvplot
ggsurvplot(km_fit, data = GBSG2,
title = "Curvas de Sobrevivência Kaplan-Meier por horTh e tsize",
xlab = "Tempo (dias)", ylab = "Probabilidade de Sobrevivência",
legend.title = "Grupos",
pval = TRUE)
# Criar variáveis de grupo para tsize
GBSG2 <- GBSG2 %>%
mutate(tsize_group = cut(tsize,
breaks = quantile(tsize, probs = c(0, 0.25, 0.5, 0.75, 1)),
include.lowest = TRUE,
labels = c("Q1", "Q2", "Q3", "Q4")))
# Ajustar o modelo Kaplan-Meier para cada combinação de horTh e tsize_group
km_fit <- survfit(Surv(time, cens) ~ horTh + tsize_group, data = GBSG2)
# Visualizar as curvas de sobrevivência Kaplan-Meier com ggsurvplot
ggsurvplot(
km_fit, data = GBSG2,
title = "Curvas de Sobrevivência Kaplan-Meier por horTh e tsize",
xlab = "Tempo (dias)", ylab = "Probabilidade de Sobrevivência",
linetype = "horTh", # Define o tipo de linha para cada nível de horTh
color = "tsize_group", # Define a cor para cada nível de tsize_group
legend.title = "Grupos", # Título da legenda
censor = FALSE, # Remove os pontos de censura
ggtheme = theme_minimal() # Tema mais limpo e minimalista
)
# Criar novo dataframe com combinações específicas de horTh e tsize
newdat <- expand.grid(
horTh = levels(GBSG2$horTh),
tsize = quantile(GBSG2$tsize, probs = c(0.25, 0.5, 0.75))
)
# Combinar dados originais com as combinações desejadas
GBSG2_selected <- GBSG2 %>%
semi_join(newdat, by = c("horTh", "tsize"))
# Criar novo dataframe com combinações específicas de horTh e tsize
newdat <- expand.grid(
horTh = levels(GBSG2$horTh),
tsize = quantile(GBSG2$tsize, probs = c(0.25, 0.5, 0.75))
)
# Combinar dados originais com as combinações desejadas
GBSG2_selected <- GBSG2 %>%
filter(paste(horTh, tsize) %in% paste(newdat$horTh, newdat$tsize))
View(surv_cxmod)
View(newdat)
# Criar novo dataframe com combinações específicas de horTh e tsize
newdat <- expand.grid(
horTh = levels(GBSG2$horTh),
tsize = quantile(GBSG2$tsize, probs = c(0.25, 0.5, 0.75))
)
# Combinar dados originais com as combinações desejadas
GBSG2_selected <- GBSG2 %>%
filter(paste(GBSG2$horTh, GBSG2$tsize) %in% paste(newdat$horTh, newdat$tsize))
# Ajustar o modelo Kaplan-Meier para cada combinação de horTh e tsize
km_fit <- survfit(Surv(time, cens) ~ horTh + tsize, data = GBSG2_selected)
# Combinar dados originais com as combinações desejadas
GBSG2_selected <- GBSG2 %>%
filter(paste(GBSG2$horTh, GBSG2$tsize, GBSG2$cens) %in% paste(newdat$horTh, newdat$tsize))
# Ajustar o modelo Kaplan-Meier para cada combinação de horTh e tsize
km_fit <- survfit(Surv(time, cens) ~ horTh + tsize, data = GBSG2_selected)
# Criar novo dataframe com combinações específicas de horTh e tsize
newdat <- expand.grid(
horTh = levels(GBSG2$horTh),
tsize = quantile(GBSG2$tsize, probs = c(0.25, 0.5, 0.75))
)
# Combinar dados originais com as combinações desejadas
GBSG2_selected <- GBSG2 %>%
filter(paste(GBSG2$horTh, GBSG2$tsize, GBSG2$cens) %in% paste(newdat$horTh, newdat$tsize))
# Ajustar o modelo Kaplan-Meier para cada combinação de horTh e tsize
km_fit <- survfit(Surv(time, cens) ~ horTh + tsize, data = GBSG2_selected)
# Criar novo dataframe com combinações específicas de horTh e tsize
newdat <- expand.grid(
horTh = levels(GBSG2$horTh),
tsize = quantile(GBSG2$tsize, probs = c(0.25, 0.5, 0.75))
)
# Combinar dados originais com as combinações desejadas
GBSG2_selected <- GBSG2 %>%
filter(paste(GBSG2$horTh, GBSG2$tsize, GBSG2$cens) %in% paste(newdat$horTh, newdat$tsize, newdat$cens))
# Ajustar o modelo Kaplan-Meier para cada combinação de horTh e tsize
km_fit <- survfit(Surv(time, cens) ~ horTh + tsize, data = GBSG2_selected)
# Criar novo dataframe com combinações específicas de horTh e tsize
newdat <- expand.grid(
horTh = levels(GBSG2$horTh),
tsize = quantile(GBSG2$tsize, probs = c(0.25, 0.5, 0.75)),
cens = levels(GBSG2$cens)
)
# Combinar dados originais com as combinações desejadas
GBSG2_selected <- GBSG2 %>%
filter(paste(GBSG2$horTh, GBSG2$tsize, GBSG2$cens) %in% paste(newdat$horTh, newdat$tsize, newdat$cens))
# Ajustar o modelo Kaplan-Meier para cada combinação de horTh e tsize
km_fit <- survfit(Surv(time, cens) ~ horTh + tsize, data = GBSG2_selected)
# Instale os pacotes, caso ainda não os tenha
if (!require("TH.data")) install.packages("TH.data")
if (!require("survival")) install.packages("survival")
if (!require("survminer")) install.packages("survminer")
# Carregar os pacotes
library(TH.data)
library(survival)
library(survminer)
library(ggplot2)
# Carregar o conjunto de dados
data("GBSG2", package = "TH.data")
head(GBSG2)
# Criando o objeto de sobrevivência
surv_obj <- Surv(time = GBSG2$time, event = GBSG2$cens)
# Ajuste do modelo Kaplan-Meier
km_fit <- survfit(surv_obj ~ 1)
# Visualização do Kaplan-Meier
ggsurvplot(km_fit, data = GBSG2, conf.int = TRUE,
title = "Curva de Sobrevivência Kaplan-Meier",
xlab = "Tempo (dias)", ylab = "Probabilidade de Sobrevivência")
# Ajuste do modelo Weibull sem decomposição
wbmod <- survreg(Surv(time, cens) ~ 1, data = GBSG2, dist = "weibull")
# Definir uma sequência de probabilidades de sobrevivência
surv <- seq(0.99, 0.01, by = -0.01)
# Calcular os tempos preditos para cada nível de probabilidade de sobrevivência
# Como estamos prevendo apenas uma curva média, precisamos de um único conjunto de predições
time_pred <- predict(wbmod, type = "quantile", p = 1 - surv, newdata = data.frame(1))
# Criar um data frame para visualização
surv_wbmod <- data.frame(time = time_pred, survival = surv)
# Plotar a curva de sobrevivência Weibull simplificada
ggplot(surv_wbmod, aes(x = time, y = survival)) +
geom_line(color = "blue") +
labs(title = "Curva de Sobrevivência Weibull (Sem Decomposição)",
x = "Tempo (dias)", y = "Probabilidade de Sobrevivência") +
theme_minimal()
# Ajuste do modelo de Cox sem especificar covariáveis (curva média de sobrevivência)
cox_fit <- coxph(Surv(time, cens) ~ 1, data = GBSG2)
# Gerar a curva de sobrevivência média
cox_surv <- survfit(cox_fit)
# Visualizar a curva de sobrevivência usando ggsurvplot
ggsurvplot(cox_surv, data = GBSG2,
title = "Curva de Sobrevivência do Modelo de Cox",
xlab = "Tempo (dias)", ylab = "Probabilidade de Sobrevivência",
conf.int = TRUE)
# Instale os pacotes, caso ainda não os tenha
if (!require("TH.data")) install.packages("TH.data")
if (!require("survival")) install.packages("survival")
if (!require("survminer")) install.packages("survminer")
# Carregar os pacotes
library(TH.data)
library(survival)
library(survminer)
library(ggplot2)
# Carregar o conjunto de dados
data("GBSG2", package = "TH.data")
head(GBSG2)
# Weibull model
wbmod <- survreg(Surv(time,cens) ~ horTh + tsize, data = GBSG2)
# Imaginary patients
newdat <- expand.grid(
horTh = levels(GBSG2$horTh),
tsize = quantile(GBSG2$tsize, probs = c(0.25, 0.5, 0.75)))
newdat
# Compute survival curves
surv <- seq(.99, .01, by = -.01)
t <- predict(wbmod,
type = "quantile",
p = 1-surv,
newdata = newdat)
# How many rows and columns does t have?
dim(t)
# Use cbind() to combine the information in newdat with t
surv_wbmod_wide <- cbind(newdat, t)
# Use melt() to bring the data.frame to long format
surv_wbmod <- melt(surv_wbmod_wide,
id.vars = c("horTh", "tsize"),
variable.name = "surv_id",
value.name = "time")
# Use surv_wbmod$surv_id to add the correct survival probabilities surv
surv_wbmod$surv <- surv[as.numeric(surv_wbmod$surv_id)]
# Add columns upper, lower, std.err, and strata to the data.frame
surv_wbmod[, c("upper", "lower", "std.err", "strata")] <- NA
# Take a look at the structure of the object
str(surv_wbmod)
# Plot the survival curves
print(ggsurvplot_df(surv_wbmod,
surv.geom = geom_line,
linetype = "horTh",
color = "tsize",
title = "Curva de Sobrevivência Weibull",
legend.title = NULL))
# Cox model
cxmod <- coxph(Surv(time, cens) ~ horTh + tsize, data = GBSG2)
# Imaginary patients
newdat <- expand.grid(
horTh = levels(GBSG2$horTh),
tsize = quantile(GBSG2$tsize, probs = c(0.25, 0.5, 0.75))
)
# Compute survival curves
cxsf <- survfit(cxmod, data = GBSG2, newdata = newdat, conf.type = "none")
# Look at first 6 rows of cxsf$surv and time points
head(cxsf$surv)
# Compute data.frame needed for plotting
surv_cxmod0 <- surv_summary(cxsf)
# Get a character vector of patient letters (patient IDs)
pid <- as.character(surv_cxmod0$strata)
# Multiple of the rows in newdat so that it fits with surv_cxmod0
m_newdat <- newdat[pid, ]
# Add patient info to data.frame
surv_cxmod <- cbind(surv_cxmod0, m_newdat)
head(surv_cxmod)
# Plot
print(ggsurvplot_df(surv_cxmod, linetype = "horTh", color = "tsize",
legend.title = NULL, censor = FALSE))
# Carregar pacotes necessários
library(survival)
library(ggplot2)
library(survminer)
library(dplyr)
# Carregar o conjunto de dados lung
data(lung)
# Carregar o conjunto de dados lung
data(cancer, package="survival")
force(cancer)
source("~/.active-rstudio-document")
# Carregar o conjunto de dados cancer
cancer <- data(cancer, package="survival")
# Visualizar os dados
head(cancer)
# Carregar o conjunto de dados cancer
data(cancer, package="survival")
force(lung)
# Carregar o conjunto de dados cancer
data(cancer, package="survival")
# Visualizar os dados
head(cancer)
View(cancer)
# Ajustar o modelo de Weibull
weibull_model <- survreg(Surv(time, status) ~ age + sex + meal.cal, data = cancer, dist = "weibull")
# Resumo do modelo de Weibull
summary(weibull_model)
# Ajustar o modelo de Cox
cox_model <- coxph(Surv(time, status) ~ age + sex + meal.cal, data = cancer)
# Resumo do modelo de Cox
summary(cox_model)
# Comparar os dois modelos
# (AIC para ambos os modelos)
weibull_aic <- AIC(weibull_model)
cox_aic <- AIC(cox_model)
cat("AIC do modelo Weibull:", weibull_aic, "\n")
cat("AIC do modelo Cox:", cox_aic, "\n")
# Análise de sobrevivência - Kaplan-Meier
km_fit <- survfit(Surv(time, status) ~ sex, data = cancer_clean)
# Visualização das curvas de sobrevivência de Kaplan-Meier
ggsurvplot(km_fit, data = cancer_clean,
title = "Curvas de Sobrevivência de Kaplan-Meier por Sexo",
xlab = "Tempo (dias)",
ylab = "Probabilidade de Sobrevivência",
risk.table = TRUE,
pval = TRUE)
# Análise de sobrevivência - Kaplan-Meier
km_fit <- survfit(Surv(time, status) ~ sex, data = cancer_clean)
# Análise de sobrevivência - Kaplan-Meier
km_fit <- survfit(Surv(time, status) ~ sex, data = cancer)
# Visualização das curvas de sobrevivência de Kaplan-Meier
ggsurvplot(km_fit, data = cancer,
title = "Curvas de Sobrevivência de Kaplan-Meier por Sexo",
xlab = "Tempo (dias)",
ylab = "Probabilidade de Sobrevivência",
risk.table = TRUE,
pval = TRUE)
# Visualização dos efeitos dos preditores no modelo de Cox
ggforest(cox_model, data = cancer)
# Visualização dos efeitos dos preditores no modelo Weibull
# Obter os valores preditos do modelo Weibull
predicted_survival <- predict(weibull_model, type = "response")
cancer$predicted_survival <- predicted_survival
cancer$predicted_survival <- predicted_survival
# Limpeza dos dados: remover observações com dados ausentes
cancer_clean <- cancer %>%
na.omit()
# Carregar o conjunto de dados cancer
data(cancer, package="survival")
# Limpeza dos dados: remover observações com dados ausentes
cancer <- cancer %>%
na.omit()
# Visualizar os dados
head(cancer)
# Análise descritiva
summary(cancer)
# Ajustar o modelo de Weibull
weibull_model <- survreg(Surv(time, status) ~ age + sex + meal.cal, data = cancer, dist = "weibull")
# Resumo do modelo de Weibull
summary(weibull_model)
# Ajustar o modelo de Cox
cox_model <- coxph(Surv(time, status) ~ age + sex + meal.cal, data = cancer)
# Resumo do modelo de Cox
summary(cox_model)
# Comparar os dois modelos
# (AIC para ambos os modelos)
weibull_aic <- AIC(weibull_model)
cox_aic <- AIC(cox_model)
cat("AIC do modelo Weibull:", weibull_aic, "\n")
cat("AIC do modelo Cox:", cox_aic, "\n")
# Análise de sobrevivência - Kaplan-Meier
km_fit <- survfit(Surv(time, status) ~ sex, data = cancer)
# Visualização das curvas de sobrevivência de Kaplan-Meier
ggsurvplot(km_fit, data = cancer,
title = "Curvas de Sobrevivência de Kaplan-Meier por Sexo",
xlab = "Tempo (dias)",
ylab = "Probabilidade de Sobrevivência",
risk.table = TRUE,
pval = TRUE)
# Visualização dos efeitos dos preditores no modelo de Cox
ggforest(cox_model, data = cancer)
# Visualização dos efeitos dos preditores no modelo Weibull
# Obter os valores preditos do modelo Weibull
predicted_survival <- predict(weibull_model, type = "response")
cancer$predicted_survival <- predicted_survival
# Criar um gráfico de dispersão para visualizar os efeitos do modelo Weibull
ggplot(cancer_clean, aes(x = age, y = predicted_survival, color = as.factor(sex))) +
geom_point() +
labs(title = "Efeitos do Modelo Weibull",
x = "Idade",
y = "Sobrevivência Predita",
color = "Sexo") +
theme_minimal()
# Visualização das curvas de sobrevivência de Kaplan-Meier
ggsurvplot(km_fit, data = cancer,
title = "Curvas de Sobrevivência de Kaplan-Meier por Sexo",
xlab = "Tempo (dias)",
ylab = "Probabilidade de Sobrevivência",
risk.table = TRUE,
pval = TRUE,
legend.labs = c("Masculino", "Feminino"))
# Visualização dos efeitos dos preditores no modelo de Cox
ggforest(cox_model, data = cancer)
# Criar um gráfico de dispersão para visualizar os efeitos do modelo Weibull
ggplot(cancer_clean, aes(x = age, y = predicted_survival, color = as.factor(sex))) +
geom_point() +
labs(title = "Efeitos do Modelo Weibull",
x = "Idade",
y = "Sobrevivência Predita",
color = "Sexo") +
theme_minimal()
# Visualização dos efeitos dos preditores no modelo Weibull
# Obter os valores preditos do modelo Weibull
predicted_survival <- predict(weibull_model, type = "response")
# Adicionar os valores preditos ao conjunto de dados
cancer$predicted_survival <- predicted_survival
# Criar um gráfico de dispersão para visualizar os efeitos do modelo Weibull
ggplot(cancer, aes(x = age, y = predicted_survival, color = as.factor(sex))) +
geom_point() +
labs(title = "Efeitos do Modelo Weibull",
x = "Idade",
y = "Sobrevivência Predita",
color = "Sexo") +
theme_minimal()
# Modificar a variável 'sex' para ser um fator com labels descritivos
cancer$sex <- factor(cancer$sex, levels = c(1, 2), labels = c("Masculino", "Feminino"))
# Criar um gráfico de dispersão para visualizar os efeitos do modelo Weibull
ggplot(cancer, aes(x = age, y = predicted_survival, color = as.factor(sex))) +
geom_point() +
labs(title = "Efeitos do Modelo Weibull",
x = "Idade",
y = "Sobrevivência Predita",
color = "Sexo") +
theme_minimal()
source("~/Dev/aprendizado-de-maquina-na-saude/5-ModeloSobrevivência/Solução/Solução.R")
source("~/Dev/aprendizado-de-maquina-na-saude/5-ModeloSobrevivência/Solução/Solução.R")
# Criar um gráfico de dispersão para visualizar os efeitos do modelo Weibull
ggplot(cancer, aes(x = age, y = predicted_survival, color = as.factor(sex))) +
geom_point() +
labs(title = "Efeitos do Modelo Weibull",
x = "Idade",
y = "Sobrevivência Predita",
color = "Sexo") +
theme_minimal()
# Visualização das curvas de sobrevivência de Kaplan-Meier
ggsurvplot(km_fit, data = cancer,
title = "Curvas de Sobrevivência de Kaplan-Meier por Sexo",
xlab = "Tempo (dias)",
ylab = "Probabilidade de Sobrevivência",
risk.table = TRUE,
pval = TRUE,
legend.labs = c("Masculino", "Feminino"))
