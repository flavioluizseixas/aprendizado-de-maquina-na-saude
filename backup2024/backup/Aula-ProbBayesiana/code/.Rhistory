a=2
a+2
teta <- runif(100000,0,1)
hist(teta)
priori<-dunif(teta,0,1)
hist(priori)
imp<-dunif(teta,0,1)
hist(imp)
tate.sir<-sample(teta,size=1000,replace=T,pro=w.norm)
w.norm<-w/sum(w)
1-pnorm(115,100,10)
clear()
clear
library("expm")
library("markovchain")
library("diagram")
library("pracma")
nomes <- c("Centro","Orla","Parque")
byrow <- TRUE
matrizTransicao <- matrix(data = c(0.95, 0.03, 0.02,
0.02, 0.90, 0.08,
0.05, 0.05, 0.90), byrow = byrow, nrow = 3,
dimnames = list(nomes, nomes))
matrizTransicao
estadosIniciais <- c(0.5, 0.3, 0.2)
estadosIniciais
# Diagrama
plotmat(
A = matrizTransicao,
pos = c(1, 2),
lwd = 1,
box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light yellow",
arr.length = 0.1,
arr.width = 0.1,
self.cex = 0.4,
self.shifty = -0.01,
self.shiftx = 0.13,
main = "Retiradas e Devoluções"
)
# Cadeia de Markov
cadeiaMarkov <-new("markovchain", states = nomes, byrow = byrow, transitionMatrix = matrizTransicao, name = "Modelo:")
cadeiaMarkov
defaultMc <- new("markovchain")
defaultMc
mcList <- new("markovchainList", markovchains = list(cadeiaMarkov, defaultMc), name = "Lista da Cadeia de Markov")
mcList
# Executando a cadeia de Markov
apos2Dias <- estadosIniciais * (cadeiaMarkov^2)
apos3Dias <- estadosIniciais * (cadeiaMarkov^3)
apos4Dias <- estadosIniciais * (cadeiaMarkov^4)
apos5Dias <- estadosIniciais * (cadeiaMarkov^5)
apos6Dias <- estadosIniciais * (cadeiaMarkov^6)
apos7Dias <- estadosIniciais * (cadeiaMarkov^7)
semana <- c("D2","D3","D4","D5","D6","D7")
Prob <- matrix(data = c(apos2Dias,apos3Dias,apos4Dias,apos5Dias,apos6Dias,apos7Dias), byrow = byrow, nrow = 6,dimnames = list(semana,nomes))
Prob
#** Parte 1 - Cálculo da Amostra com Reposição **#
# Tamanho da amostra
n <- 10^5
# Amostra de teta
set.seed(42)
teta <- runif(n, 0, 1)
hist(teta)
# Verossimilhança para cada valor de teta (n = 4 e x = 0)
ver <- dbinom(0, 4, prob = teta)
hist(ver)
# Densidade da priori para os valores de teta
priori <- dunif(teta, 0, 1)
# Função de importância
imp <- dunif(teta, 0, 1)
# Pesos
pesos <- (ver*priori)/imp
# Pesos normalizados
pesos.norm <- pesos/sum(pesos)
# Amostra com reposição
set.seed(123)
teta.sir <- sample(teta, size = 1000, replace = TRUE, prob = pesos.norm)
hist(teta.sir, main = "Re-Amostragem por Importância")
source("http://bioconductor.org/biocLite.R")
bioLite(c("graph", "RBGL", "Rgraphviz"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
libPahts()
libPaths()
.libPaths()
install.packages("BiocManager")
install.packages("BiocManager")
bioLite(c("graph", "RBGL", "Rgraphviz"))
install.packages("gRbase", dependencies=TRUE)
install.packages("grain", dependencies=TRUE)
gRain
install.packages("gRain", dependencies=TRUE)
install.packages("RBGL", dependencies=TRUE)
library(bnlearn)
library(gRain)
graphviz.chart(dag, col = "darkblue", bg = "azure", bar.col = "darkblue")
dag = read.bif('cancer.bif', debug = FALSE)
setwd("~/Dev/tex/ml4healthcare/4-Aula-ProbBayesiana/code")
dag = read.bif('cancer.bif', debug = FALSE)
graphviz.chart(dag, col = "darkblue", bg = "azure", bar.col = "darkblue")
version
install.packages("gRain")
install.packages("gRbase")
install.packages("RBGL")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RBGL")
install.packages("gRbase")
install.packages("gRain")
library(bnlearn)
library(gRain)
graphviz.chart(dag, col = "darkblue", bg = "azure", bar.col = "darkblue")
#graphviz.plot(dag)
#graphviz.chart(dag, col = "darkblue", bg = "azure", bar.col = "darkblue")
graphviz.chart(dag)
cpdist(dag)
cpdist(dag, "Cancer")
dag["Cancer"]
cpquery(dag, event = (Cancer == "True"), evidence = (Pollution == "low") & (Smoker = "True"))
cpquery(dag, event = (Cancer == "True"), evidence = (Pollution == "low"))
cpquery(dag, event = (Cancer == "True"), evidence = (Pollution == "high"))
cpquery(dag, event = (Cancer == "True"), evidence = ((Pollution == "high") & (Smoker = "True")))
cpquery(dag, event = (Cancer == "True"), evidence = c((Pollution == "high") & (Smoker = "True")))
cpquery(dag, event = (Cancer == "True"), evidence = ((Pollution == "high") & (Smoker == "True")))
cpquery(dag, event = (Cancer == "True"), evidence = (Pollution == "high") & (Smoker == "True"))
cpquery(dag, event = (Cancer == "True"), evidence = (Pollution == "high") & (Smoker == "True"))
cpquery(dag, event = (Cancer == "True"), evidence = (Pollution == "high") & (Smoker == "True"))
cpquery(dag, event = (Cancer == "True"), evidence = (Pollution == "high") & (Smoker == "True"))
cpquery(dag, event = (Cancer == "True"), evidence = (Pollution == "high") & (Smoker == "True"), method = "ls")
cpquery(dag, event = (Cancer == "True"), evidence = (Pollution == "high") & (Smoker == "True"), method = "lw")
cpquery(dag, event = (Cancer == "True"), evidence = (Smoker == "True"), method = "lw")
cpquery(dag, event = (Cancer == "True"), evidence = (Pollution == "high") & (Smoker == "True"), method = "lw", debug = TRUE)
cpquery(dag, event = (Cancer == "True"), evidence = (Pollution == "high") & (Smoker == "True"), method = "ls", debug = TRUE)
cpquery(dag, event = (Cancer == "True"), evidence = (Pollution == "high") & (Smoker == "True"), method = "ls", debug = TRUE)
cpquery(dag, event = (Cancer == "True"), evidence = (Pollution == "high") & (Smoker == "True"))
dag = read.bif('cancer.bif', debug = FALSE)
cpquery(dag, event = (Cancer == "True"), evidence = (Pollution == "high") & (Smoker == "True"), method = "ls", debug = TRUE)
cpquery(dag, event = (Xray == "positive"), evidence = (Pollution == "high") & (Smoker == "True"))
dag = read.bif('cancer.bif', debug = FALSE)
graphviz.chart(dag)
dag.junction = compile(as.grain(dag))
querygrain(dag.junction, nodes = c("Pollution", "Xray"), states = c("high", "positive"))
querygrain(dag.junction, nodes = c("Cancer"))
dag.junction = compile(as.grain(dag))
querygrain(dag.junction, nodes = c("Cancer"))
dag.junction = compile(as.grain(dag))
querygrain(dag.junction, nodes = c("Cancer"))
gin.find <- setFinding(dag.junction, nodes = c("Pollution", "Xray"), states = c("high", "positive"))
querygrain(gin.find, nodes = c("Cancer"))
## Example: Markov chain
yn <- c("yes", "no")
## Specify p(x0)
x.0 <- cptable(~x0, values=c(1, 9), levels=yn)
## Specify transition density
x.x <- cptable(~x[i]|x[i-1], values=c(1, 99, 2, 98), levels=yn)
## Pattern to be repeated
pat <- list(x.x)
rep.pat <- repeatPattern(pat, instances=1:5)
cpt <- compileCPT(c(list(x.0), rep.pat))
mc <- grain(cpt)
if (interactive()) iplot(mc)
## Example: Hidden markov model: The x[i]'s are unobserved, the
## y[i]'s can be observed.
yn <- c("yes", "no")
## Specify p(x0)
x.0 <- cptable(~x0, values=c(1, 9), levels=yn)
## Specify transition density
x.x <- cptable(~x[i]|x[i-1], values=c(1, 99, 2, 98), levels=yn)
## Specify emission density
y.x <- cptable(~y[i]|x[i], values=c(10, 90, 20, 80), levels=yn)
## The pattern to be repeated
pat <- list(x.x, y.x)
## Repeat pattern and create network
rep.pat <- repeatPattern(pat, instances=1:5)
cpt <- compileCPT(c(list(x.0), rep.pat))
hmm <- grain(cpt)
hmm
if (interactive()) iplot(hmm)
if (interactive()) iplot(mc)
